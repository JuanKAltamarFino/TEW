from pathlib import Path
import pandas as pd
import psutil
from pywinauto.application import Application
import numpy as np
import cv2
from EnumTEW import MatchesColumns
from EnumTEW import AnglesColumns
import pytesseract
from SetUp import readRouteFolderIfExist
pytesseract.pytesseract.tesseract_cmd = r"J:\Program Files\Tesseract-OCR\tesseract.exe"
def main():
    #TEW2020 Pre Booking
    #1- Read the matches generated by the current week
    dict_matchesToBook = getMatchesToBook()
    #0 Generate only one DF with all matches    
    df_matchesToPreBook = generateDFMatchesToPreBook(dict_matchesToBook)
    df_storyLineAngles=None
    #2- Locate the main screen
    app = getApplicationTEW2020()
    ubicateInMainScreen(app)
    #3- Make the Pre booking
    executePreBooking(app,df_matchesToPreBook,df_storyLineAngles)
def getMatchesToBook():
    routeFiles = readRouteFolderIfExist()
    fileName = 'Matches.xlsx'
    dict_matchesToBook = getDictExcel(routeFiles,fileName)
    return dict_matchesToBook;
def getDictExcel(routeFiles,excelFileName):
    xlsx_file = Path(routeFiles, fileName)
    dict_=pd.read_excel(xlsx_file,None)
    return dict_
def generateDFMatchesToPreBook(dict_matches):
	v_columns=generateColumnsForDFMatchesToPreBook()
	df_matchesToPreBook=pd.DataFrame([],columns=v_columns)
	v_week=obtainWeekOfGame()
	for key in dict_matches.keys():
		df_matches=dict_matches.get(key)
		df_matches=df_matches.loc[df_matches['Week']==v_week]
		df_matches.loc[df_matches['TypeMatch']=='Tag2',['TypeMatch']]='2'
		df_matches.loc[df_matches['TypeMatch']=='Tag3',['TypeMatch']]='ttt'
		df_matches.loc[df_matches['TypeMatch']=='Tag4',['TypeMatch']]='fff'
		df_matches.loc[df_matches['TypeMatch']=='Single2',['TypeMatch']]='1'
		df_matches.loc[df_matches['TypeMatch']=='Single3',['TypeMatch']]='t'
		df_matches.loc[df_matches['TypeMatch']=='Single4',['TypeMatch']]='f'
	return df_matchesToPreBook
def generateColumnsForDFMatchesToPreBook():
	v_columns=[]
	for index_,value in MatchesColumns:
		if type(value) is tuple:
			v_columns.extend(value)
		else:
			v_columns.append(value)
	return v_columns
def obtainWeekOfGame():
    v_df_calendar=readParameters().get('Calendar')
    v_week=v_df_calendar.tail(1).Week.tail(1).item()    
    return v_week
def readParameters():
    xlsx_file = Path(readRouteFolderIfExist(), 'Param.xlsx')
    db_parameters=pd.read_excel(xlsx_file,None)
    return db_parameters
def getApplicationTEW2020():
    try:
        for proc in psutil.process_iter():
            if proc.name() == "TEW2020.exe":
                app = Application(backend='uia').connect(process=proc.pid)
    except:
        #We need Administrator role to do this part, so first run python with this role
        app = Application(backend="uia").start(r"E:\Program Files (x86)\GDS\TEW2020\TEW2020.exe")
    return app
def ubicateInMainScreen(app):
    while True:
        window = app.top_window()
        window.set_focus()
        #0 Take screen shot of the current window
        #1 Locate the coordinates of MainScreenIcon    
        gray_screen = captureGrayScreen(window)    
        top_left,bottom_right=getLocalizationOfTheMainScreenIcon(gray_screen)
        #1.1 If the result is (-1,-1) then locate the close icon and click on it repeat until coordinates different to (-1,-1)
        if top == (-1,-1):
            closeCurrentSubWindow(app)
        else:
            break
    #1.2 else click on MainScreenIcon
    clickOn(top_left,bottom_right)
    window = app.top_window()
    window.set_focus()
def captureGrayScreen(window,rectangle=None):
    if rectangle is None:
        screen=window.capture_as_image()
    else:
        screen=window.capture_as_image(rectangle)
    np_screen = np.array(screen, dtype = np.uint8)
    gray_screen = cv2.cvtColor(np_screen, cv2.COLOR_BGR2GRAY)
    return gray_screen
def getLocalizationOfTheMainScreenIcon(screen):
    route_searched_image_name=".\Images\Buttons\MainScreenIcon.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocatiozationOfImage(route_searched_image_name,gray_screen,print_max_val=False):
    np_image = cv2.imread(route_searched_image_name)
    gray_image = cv2.cvtColor(np_image, cv2.COLOR_BGR2GRAY)
    matches = cv2.matchTemplate(gray_screen, gray_image, cv2.TM_CCOEFF_NORMED)
    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(matches)
    top_left = max_loc
    w, h = gray_image.shape[::-1]
    bottom_right = (top_left[0] + w, top_left[1] + h)
    if print_max_val:
        print(f'{max_val}')
    if max_val<0.98:
        return (-1,-1),(-1,-1)
    return top_left,bottom_right
def closeCurrentSubWindow(app):
    dlg = app.top_window()
    gray_screen = captureGrayScreen(dlg)
    top_left,bottom_right=getLocalizationOfTheCloseIcon(gray_screen)
    clickOn(top_left,bottom_right)
def getLocalizationOfTheCloseIcon(gray_screen):
    route_searched_image_name=".\Images\Buttons\CloseIcon.png"
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def clickOn(top_left,bottom_right):
    pyautogui.moveTo((top_left[0]+bottom_right[0])/2,(top_left[1]+bottom_right[1])/2)
    pyautogui.click()
def executePreBooking(app,df_matchesToPreBook,df_storyLineAngles):    
    #1 Locate the PreBookingButton and clickOn it
    ubicateInPreBookingMatchScreen(app)
    #2 Iterate each row of df_matchesToPreBook
    executePreBookingMatches(app,df_matchesToPreBook)    
    #3 Iterate each row of df_storyLineAngles
    #executePreBookingAngles(app,df_storyLineAngles)    
def ubicateInPreBookingMatchScreen(app):
    #1 Locate the PreBookingButton and clickOn it
    ubicateInWindowByFunction(app,getLocalizationOfThePreBookingMatchButton)
def getLocalizationOfThePreBookingMatchButton(screen):
    route_searched_image_name=".\Images\Buttons\PreBookingButton.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def ubicateInWindowByFunction(app,func):
    #1 Locate the PreBookingButton and clickOn it
    window = app.top_window()
    window.set_focus()
    #0 Take screen shot of the current window
    #1 Locate the coordinates of MainScreenIcon    
    gray_screen = captureGrayScreen(window)
    top_left,bottom_right=func(gray_screen)
    clickOn(top_left,bottom_right)
    window = app.top_window()
    window.set_focus()
def executePreBookingMatches(app,df_matchesToPreBook):
    lst_workersColumns=['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10']
    #2 Iterate each row of df_matchesToPreBook
    for index, row in df_matchesToPreBook.iterrows():
    #2.1 keyWrite the name of the show
        pyautogui.write(row[MatchesColumns.SHOW_NAME.value])
    #2.2 locate the PreBookMatchButton and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfThePreBookMatchButton)        
    #2.3 locate the SearchButtonForBookMatch and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfTheSearchButtonForBookMatch)
    #2.4 keyWrite the typeOfMatch (1vs1,2vs2, Three Ways, etc)
        pyautogui.write(row[MatchesColumns.TYPE_MATCH.value])
    #2.5 locate the SearchButtonForSearchMatch and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfTheSearchButtonForSearchMatch)
    #2.6 locate the VSLogo and clickOn it
    #Note: Consider to use CompanyLogo instead of VSLogo, because if you want use a 10+ wrestlers you will need it.
        ubicateInWindowByFunction(app,getLocalizationOfTheCompanysLogo)
    #2.7 iterate each participant
        sub_row=row[lst_workersColumns]
        sub_row=sub_row.dropna()
        for workerColName in sub_row.index:            
    #2.7.1 keyWrite the WorkerName
            pyautogui.write(sub_row[workerColName])
    #2.7.2 press TabKey
            pyautogui.press('tab')
    #2.8 locate the saveButton and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfSaveButton)
    #2.9 locate the SuggestedName label and do click some 10 t0 20 px to the right
        window = app.top_window()
        gray_screen = captureGrayScreen(window)
        top_left,bottom_right=getLocalizationOfSuggestedNameLabel(gray_screen)
        v_rectangle=getSuggestedNameLabelRectangle(top_left,bottom_right)
        top_left=(v_rectangle.left,v_rectangle.top)
        bottom_right=(v_rectangle.right,v_rectangle.bottom)
        clickOn(top_left,bottom_right)
    #2.10 keyWrite the suggested name for the match
        pyautogui.write(row[MatchesColumns.SUGGESTED_NAME.value])
        while True:
        #2.11 find the scrollRightIcon
            window = app.top_window()
            gray_screen = captureGrayScreen(window)
            top_left,bottom_right=getLocalizationOfScrollRightIcon(gray_screen)
        #2.12 Take a print screen of a rectangle 5px from the top_right to generate a rectangle of W=98px H=12px aprox        
            v_rectangle=getScrollRightIconRectangle(top_left,bottom_right)
            gray_screen = captureGrayScreen(dlg,v_rectangle)
        #2.13 Convert image to text
            text=pytesseract.image_to_string(gray_screen)
            v_minsTotal=getMinutesForMatchesText(text)
        #2.17 The result represents the minutes of the fight, compare it with the expected minutes for that match                
        #2.17.1 if is lower than
            if v_minsTotal<row[MatchesColumns.EXPECTED_MINUTES.value]:
                v_diff=abs(row[MatchesColumns.EXPECTED_MINUTES.value]-v_minsTotal)
                gray_screen = captureGrayScreen(window)
                for i in range(0,v_diff):
        #2.17.1.1 locate the ScrollRightIcon and clickOn it by the difference between both values                
                    top_left,bottom_right=getLocalizationOfScrollRightIcon(gray_screen)
                    clickOn(top_left,bottom_right)
        #2.17.2 if is great than
            elif v_minsTotal>row[MatchesColumns.EXPECTED_MINUTES.value]:
        #2.17.2.1 locate the ScrollLeftIcon and clickOn it by the difference between both values
                v_diff=abs(row[MatchesColumns.EXPECTED_MINUTES.value]-v_minsTotal)
                gray_screen = captureGrayScreen(window)
                for i in range(0,v_diff):            
        #2.17.1.1 locate the ScrollLeftIcon and clickOn it by the difference between both values                
                    top_left,bottom_right=getLocalizationOfScrollLeftIcon(gray_screen)
                    clickOn(top_left,bottom_right)
        #2.17.3 if are equals break the iteration
            else:
                break
    #2.18 locate PreBookingSaveMatch and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfPreBookingSaveMatchButton)
    #2.19 locate WarningLogo
        window = app.top_window()
        gray_screen = captureGrayScreen(window)
        top_left,bottom_right=getLocalizationOfWarningLogo(gray_screen)
    #2.19.1 If appears WarningLogo
        if top_left!=(-1,-1):
    #2.19.1.1 locate the YesButton and clickOn it   
            ubicateInWindowByFunction(app,getLocalizationOfYesButton)
    #2.20 get top_window and set_focus
        window = app.top_window()
        window.set_focus()
def getLocalizationOfThePreBookMatchButton(gray_screen):
    route_searched_image_name=".\Images\Buttons\PreBookMatchButton.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getSuggestedNameLabelRectangle(top_left,bottom_right):
    from pywinauto import win32structures
    expected_rect = win32structures.RECT()
    expected_rect.left = bottom_right[0]+10
    expected_rect.top = top_left[1]
    expected_rect.right = expected_rect.left+98
    expected_rect.bottom = expected_rect.bottom[1]+20
    return expected_rect
def getLocalizationOfTheSearchButtonForBookMatch(gray_screen):
    route_searched_image_name=".\Images\Buttons\SearchButtonForBookMatch.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfTheSearchButtonForSearchMatch(gray_screen):
    route_searched_image_name=".\Images\Buttons\SearchButtonForSearchMatch.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfTheVSLogo(gray_screen):
    route_searched_image_name=".\Images\Buttons\VSLogo.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfTheCompanysLogo(gray_screen):
    route_searched_image_name="E:\Program Files (x86)\GDS\TEW2020\Pictures\Default\Logos\AEW.jpg"
    #ToDo: Param the route of Companies Logos
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfSuggestedNameLabel(gray_screen):
    route_searched_image_name=".\Images\Labels\SuggestedNameLabel.png" 
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfSaveButton(gray_screen):
    route_searched_image_name=".\Images\Buttons\SaveButton.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfScrollRightIcon(gray_screen):
    route_searched_image_name=".\Images\Buttons\ScrollRightIcon.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getScrollRightIconRectangle(top_left,bottom_right):
    #2.12 Take a print screen of a rectangle 5px from the top_right to generate a rectangle of W=98px H=12px aprox        
    from pywinauto import win32structures
    expected_rect = win32structures.RECT()
    expected_rect.left = top_left[0]+5
    expected_rect.top = bottom_right[1]
    expected_rect.right = expected_rect.left+98
    expected_rect.bottom = bottom_right[1]+12
    return expected_rect
def getMinutesForMatchesText(text):
#2.14 Take the generated text and split it by '(' take the second [1] element
    str_lenghtMatch=str(text).split('(')[1]
#2.15 Take the second element and split by mins total
    C_MINS_TOTAL='mins total'
    v_minsTotal=int(str(str_lenghtMatch.split(C_MINS_TOTAL)[0].srip()))
    return v_minsTotal
def getLocalizationOfScrollLeftIcon(gray_screen):
    route_searched_image_name=".\Images\Buttons\ScrollLeftIcon.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfPreBookingSaveMatchButton(gray_screen):
    route_searched_image_name=".\Images\Buttons\PreBookingSaveMatchButton.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def executePreBookingAngles(app,df_storyLineAngles):
    #3 Ubicate in PreBookingAngleScreen
    ubicateInWindowByFunction(app,getLocalizationOfThePreBookingAngleButton)
    for index, row in df_storyLineAngles.iterrows():
        #3.1 
        pyautogui.write(row[AnglesColumns.SHOW_NAME.value])
        ubicateInWindowByFunction(app,getLocalizationOfThePreBookAngleButton)
        pyautogui.write(row[AnglesColumns.TYPE_ANGLE.value])
        #3.2 Locate ParticipantLabel
        window = app.top_window()
        gray_screen = captureGrayScreen(window)
        top_left,bottom_right=getLocalizationOfParticipantLabel(gray_screen)
        #3.3 Do double clickOn (from bottom left+ 24px aprox)
        v_rectangle=getParticipantLabel(top_left,bottom_right)
        clickOn((v_rectangle.left,v_rectangle.top),(v_rectangle.right,v_rectangle.bottom))
        clickOn((v_rectangle.left,v_rectangle.top),(v_rectangle.right,v_rectangle.bottom))
        #3.4 Iterate index of LST_WORKERS_COLUMNS
        for index, item in enumerate(AnglesColumns.LST_WORKERS_COLUMNS.value):            
        #3.4.1 write the WrestlerName (W#)
            pyautogui.write(row[item])            
        #3.4.2 do double Tab
            for i in range(0,2):
                pyautogui.press('tab')
        #3.4.3 if is scripted pres Space
            if row[LST_SCRIPT_COLUMNS[index]]:
                pyautogui.press('space')
        #3.4.4 do a Tab
            pyautogui.press('tab')
        #3.4.5 write the RateOn for the worker ('Overness','Entertainment','Fighting','Microphone','Charisma','Acting','Menace')
            pyautogui.write(row[LST_RATE_ON_COLUMNS[index]])
        #3.4.6 do a tab
            pyautogui.press('tab')
        #3.4.7 write the StoryLine ('Neutral','Minor Success','Success','Major Success','Minor Defeat','Defeat','Major Defeat')
            pyautogui.write(row[LST_STORY_LINE_COLUMNS[index]])
        #3.4.8 do a tab
            pyautogui.press('tab')
        #3.4.9 write the Appearance ('On','Off')
            pyautogui.write(row[LST_APPEARANCE_COLUMNS[index]])
        #3.4.10 do a tab
            pyautogui.press('tab')
        #3.5 locate the AutoNameButton and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfTheAutoNameButton)
        while True:
        #2.11 find the scrollRightIcon
            window = app.top_window()
            gray_screen = captureGrayScreen(window)
            top_left,bottom_right=getLocalizationOfScrollRightIcon(gray_screen)
        #2.12 Take a print screen of a rectangle 5px from the top_right to generate a rectangle of W=98px H=12px aprox        
            v_rectangle=getScrollRightIconRectangle(top_left,bottom_right)
            gray_screen = captureGrayScreen(dlg,v_rectangle)
        #2.13 Convert image to text
            text=pytesseract.image_to_string(gray_screen)
        #3.5.1 split text by 'mins' 
        #3.5.2 take the first element and apply srip and convert to int
        #3.5.3 compare values
            if v_minsTotal<row[MatchesColumns.EXPECTED_MINUTES.value]:
                v_diff=abs(row[MatchesColumns.EXPECTED_MINUTES.value]-v_minsTotal)
                gray_screen = captureGrayScreen(window)
                for i in range(0,v_diff):
        #2.17.1.1 locate the ScrollRightIcon and clickOn it by the difference between both values                
                    top_left,bottom_right=getLocalizationOfScrollRightIcon(gray_screen)
                    clickOn(top_left,bottom_right)
        #2.17.2 if is great than
            elif v_minsTotal>row[MatchesColumns.EXPECTED_MINUTES.value]:
        #2.17.2.1 locate the ScrollLeftIcon and clickOn it by the difference between both values
                v_diff=abs(row[MatchesColumns.EXPECTED_MINUTES.value]-v_minsTotal)
                gray_screen = captureGrayScreen(window)
                for i in range(0,v_diff):            
        #2.17.1.1 locate the ScrollLeftIcon and clickOn it by the difference between both values                
                    top_left,bottom_right=getLocalizationOfScrollLeftIcon(gray_screen)
                    clickOn(top_left,bottom_right)
        #2.17.3 if are equals break the iteration
            else:
                break
        #3.6 locate PreBookingSaveMatch and clickOn it
        ubicateInWindowByFunction(app,getLocalizationOfPreBookingSaveMatchButton)
def getLocalizationOfThePreBookAngleButton(gray_screen):
    route_searched_image_name=".\Images\Buttons\PreBookAngleButton.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getLocalizationOfParticipantLabel(gray_screen):
    route_searched_image_name=".\Images\Labels\ParticipantLabel.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
def getParticipantLabel(top_left,bottom_right):
    #3.3 Do double clickOn (from bottom left+ 24px aprox)
    from pywinauto import win32structures
    expected_rect = win32structures.RECT()
    expected_rect.left = top_left[0]+5
    expected_rect.top = bottom_right[1]+10
    expected_rect.right = expected_rect.left+98
    expected_rect.bottom = bottom_right[1]+21
    return expected_rect
def getLocalizationOfTheAutoNameButton(gray_screen):
    route_searched_image_name=".\Images\Buttons\AutoNameButton.png"    
    top_left,bottom_right=getLocatiozationOfImage(route_searched_image_name,gray_screen)
    return top_left,bottom_right
if __name__ == '__main__':
    main()
    print('Done')